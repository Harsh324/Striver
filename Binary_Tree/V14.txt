** Preorder, Inorder, Postorder Traversals in One Traversal

    ** Implementation

        vector<int> PrePostIn(Node* Tree)
        {
            stack<pair<Node*, int>> St;
            St.push({Tree, 1});
            vector<int> pre, in, post ;
            if(NULL == Tree)
                return;

            while(St.empty() != true)
            {
                auto It = St.top();
                St.pop();

                if(It.second == 1)
                {
                    pre.push_back(It.first->data);
                    It.second++;
                    St.push(It);

                    if(It.first->left != NULL)
                        St.push({It.first->left, 1});
                }
                else if(It.second == 2)
                {
                    in.push_back(It.first->data);
                    It.second++;
                    St.push(It);

                    if(It.first->right != NULL)
                        St.push({It.first->right, 1});
                }
                else
                {
                    post.push_back(It.first->data);
                }
            }
        }

        Time Complextiy : O(3N), Where N is number of nodes in the Binary Tree
        Auxillary space : O(3N), Where N is number of nodes in the Binary Tree